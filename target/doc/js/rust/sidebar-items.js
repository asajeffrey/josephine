initSidebarItems({"fn":[["ToBoolean",""],["ToInt32",""],["ToInt64",""],["ToNumber",""],["ToString",""],["ToUint16",""],["ToUint32",""],["ToUint64",""],["define_methods","Defines methods on `obj`. The last entry of `methods` must contain zeroed memory."],["define_properties","Defines attributes on `obj`. The last entry of `properties` must contain zeroed memory."],["get_context_compartment",""],["get_object_class",""],["get_object_compartment",""],["is_dom_class",""],["is_dom_object",""],["is_window",""],["maybe_wrap_object_or_null_value",""],["maybe_wrap_object_value",""],["maybe_wrap_value",""],["report_warning",""],["try_to_outerize",""]],"static":[["SIMPLE_GLOBAL_CLASS","This is a simple `JSClass` for global objects, primarily intended for tests."]],"struct":[["AutoObjectVectorWrapper",""],["CompileOptionsWrapper",""],["IdVector",""],["RootedGuard","Rust API for keeping a Rooted value in the context's root stack. Example usage: `rooted!(in(cx) let x = UndefinedValue());`. `RootedGuard::new` also works, but the macro is preferred."],["Runtime","A wrapper for the `JSRuntime` and `JSContext` structures in SpiderMonkey."]],"trait":[["GCMethods",""],["RootKind",""],["Trace","Types that can be traced."]]});